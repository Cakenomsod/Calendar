const thaiMonths = [
  '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
  '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
];
const thaiDays = ['‡∏≠‡∏≤.', '‡∏à.', '‡∏≠.', '‡∏û.', '‡∏û‡∏§.', '‡∏®.', '‡∏™.'];

let currentDate = new Date();

function init() {
  renderCalendar();
  setupEventListeners();
}


// ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô setupEventListeners
function nextMonth() {
  currentDate.setMonth(currentDate.getMonth() + 1);
  renderCalendar('next');
}

function prevMonth() {
  currentDate.setMonth(currentDate.getMonth() - 1);
  renderCalendar('prev');
}

// ‡∏ï‡∏±‡πâ‡∏á event
function setupEventListeners() {
  document.getElementById('currentMonth').addEventListener('click', showMonthModal);
  document.getElementById('closeMonth').addEventListener('click', () => {
    document.getElementById('monthModal').classList.remove('active');
  });

  // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
  window.onclick = (event) => {
    if (event.target.classList.contains('modal')) {
      event.target.classList.remove('active');
    }
  };

  // Scroll ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏Ç‡∏∂‡πâ‡∏ô/‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  window.addEventListener('wheel', (e) => {
    if (e.deltaY > 0) nextMonth();
    else if (e.deltaY < 0) prevMonth();
  });

  // ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤
  window.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') nextMonth();
    else if (e.key === 'ArrowLeft') prevMonth();
  });

  // üëá gesture ‡∏õ‡∏±‡∏î‡∏ã‡πâ‡∏≤‡∏¢‚Äì‡∏Ç‡∏ß‡∏≤
  const calendarContainer = document.getElementById('calendarContent');
  let touchStartX = 0;
  let touchEndX = 0;

  calendarContainer.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  });

  calendarContainer.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    const swipeDistance = touchEndX - touchStartX;

    if (swipeDistance > 80) prevMonth();      // ‡∏õ‡∏±‡∏î‡∏Ç‡∏ß‡∏≤ ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    else if (swipeDistance < -80) nextMonth(); // ‡∏õ‡∏±‡∏î‡∏ã‡πâ‡∏≤‡∏¢ ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  });
}



// render ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
function renderCalendar(direction = null) {
  const calendarContainer = document.getElementById('calendarContent');

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà animation ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
  if (direction) {
    const slideClass = direction === 'next' ? 'slide-left' : 'slide-right';
    calendarContainer.classList.add(slideClass);

    // ‡∏´‡∏•‡∏±‡∏á animation ‡∏à‡∏ö ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á
    setTimeout(() => {
      calendarContainer.classList.remove(slideClass);
      updateCalendarHTML();
    }, 300);
  } else {
    updateCalendarHTML();
  }
}

function updateCalendarHTML() {
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  const today = new Date();

  document.getElementById('currentMonth').textContent = `${thaiMonths[month]}`;
  document.getElementById('currentYear').textContent = `${year + 543}`;

  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const daysInPrevMonth = new Date(year, month, 0).getDate();

  let html = '<div class="calendar-grid">';

  // ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  for (let i = firstDay - 1; i >= 0; i--) {
    html += `<div class="calendar-day other-month">${daysInPrevMonth - i}</div>`;
  }

  // ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
  for (let day = 1; day <= daysInMonth; day++) {
    const isToday =
      day === today.getDate() &&
      month === today.getMonth() &&
      year === today.getFullYear();

    const dayOfWeek = new Date(year, month, day).getDay();
    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;

    html += `<div class="calendar-day ${isToday ? 'today' : ''} ${isWeekend ? 'weekend' : ''}">
      ${day}
    </div>`;
  }

  // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  const totalCells = firstDay + daysInMonth;
  const totalNeededCells = Math.ceil(totalCells / 7) * 7;
  const remaining = totalNeededCells - totalCells;
  for (let i = 1; i <= remaining; i++) {
    html += `<div class="calendar-day other-month">${i}</div>`;
  }

  html += '</div>';
  document.getElementById('calendarContent').innerHTML = html;
}


// Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
function showMonthModal() {
  const modal = document.getElementById('monthModal');
  const grid = document.getElementById('monthGrid');

  let html = '';
  thaiMonths.forEach((month, index) => {
    html += `<div class="modal-item" onclick="selectMonthFromModal(${index})">${month}</div>`;
  });

  grid.innerHTML = html;
  modal.classList.add('active');
}

function selectMonthFromModal(monthIndex) {
  currentDate.setMonth(monthIndex);
  document.getElementById('monthModal').classList.remove('active');
  renderCalendar();
}

init();

