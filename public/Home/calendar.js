import { auth, db } from "../src/firebase.js";
import {
  onAuthStateChanged,
  signOut
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-auth.js";
import {
  doc,
  getDoc
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";

document.addEventListener("DOMContentLoaded", () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà:", user.email);

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore
      const userRef = doc(db, "Users", user.uid);
      const userSnap = await getDoc(userRef);

      if (userSnap.exists()) {
        const userData = userSnap.data();
        console.log("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore:", userData);

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ calendar (‡πÄ‡∏ä‡πà‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
        document.getElementById("userEmail").textContent = userData.Email || user.email;
      } else {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Firestore (‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)");
      }

    } else {
      console.log("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login");
      window.location.href = "../Login/index.html"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
    }
  });
});


// ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ calendar)
const logoutBtn = document.getElementById("logoutBtn");
if (logoutBtn) {
  logoutBtn.addEventListener("click", async () => {
    try {
      await signOut(auth);
      localStorage.removeItem("loggedInUser");
      alert("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      window.location.href = "../Login/index.html";
    } catch (error) {
      console.error("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
  });
}

const thaiMonths = [
  '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°','‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå','‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°','‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô','‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°','‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
  '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°','‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°','‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô','‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°','‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô','‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
];

let currentDate = new Date();
let modalDate = null;

function init() {
  renderAllMonths();
  setupEventListeners();
}


// ================== SETTINGS PANEL CONTROL ==================
document.addEventListener("DOMContentLoaded", () => {
  const settingIcon = document.querySelector(".setting-icon");
  const settingPanel = document.getElementById("settingPanel");
  const overlay = document.getElementById("overlay");
  const calendar = document.querySelector(".calendar-container");

  settingIcon.addEventListener("click", () => {
    settingPanel.classList.add("active");
    overlay.classList.add("active");
    calendar.classList.add("slide-left");
  });

  // ‡∏Ñ‡∏•‡∏¥‡∏Å overlay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
  overlay.addEventListener("click", () => {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™ closing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
    settingPanel.classList.add("closing");
    overlay.classList.remove("active");

    // ‡∏£‡∏≠‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ transition ‡∏à‡∏ö
    settingPanel.addEventListener(
      "transitionend",
      () => {
        settingPanel.classList.remove("active", "closing");
      },
      { once: true } // ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    );
  });

  // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  const logoutBtn = document.getElementById("logoutBtn");
  if (logoutBtn) {
    logoutBtn.addEventListener("click", () => {
      alert("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
      settingPanel.classList.remove("active");
      overlay.classList.remove("active");
      calendar.classList.remove("slide-left");
    });
  }
});


// ------------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô -------------------
function generateMonthHTML(dateObj, highlightToday = false) {
  const year = dateObj.getFullYear();
  const month = dateObj.getMonth();
  const today = new Date();
  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const daysInPrevMonth = new Date(year, month, 0).getDate();

  let html = '<div class="calendar-grid">';

  // ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  for (let i = firstDay - 1; i >= 0; i--) {
    html += `<div class="border"><div class="calendar-day other-month">${daysInPrevMonth - i}</div></div>`;
  }

  // ‡∏ß‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
  for (let day = 1; day <= daysInMonth; day++) {
    const isToday = highlightToday &&
                    day === today.getDate() &&
                    month === today.getMonth() &&
                    year === today.getFullYear();
    const dayOfWeek = new Date(year, month, day).getDay();
    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
    html += `<div class="border"><div class="calendar-day ${isWeekend ? 'weekend' : ''} ${isToday ? 'selected' : ''}">
               ${isToday ? `<span class="today-number">${day}</span>` : day}
             </div></div>`;
  }

  // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  const totalCells = firstDay + daysInMonth;
  const remaining = Math.ceil(totalCells / 7) * 7 - totalCells;
  for (let i = 1; i <= remaining; i++) {
    html += `<div class="border"><div class="calendar-day other-month">${i}</div></div>`;
  }

  html += '</div>';
  return html;
}


// ------------------- ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô modal -------------------
function handleModalScroll(e) {
  e.preventDefault(); // ‚ùó ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ body ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô

  if (e.deltaY > 0) {
    // scroll ‡∏•‡∏á ‚Üí ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    modalDate.setDate(modalDate.getDate() + 1);
  } else if (e.deltaY < 0) {
    // scroll ‡∏Ç‡∏∂‡πâ‡∏ô ‚Üí ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    modalDate.setDate(modalDate.getDate() - 1);
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
  renderActivityInModal();

  // sync ‡∏Å‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å
  currentDate = new Date(modalDate);
  renderAllMonths();

  // highlight ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å
  const day = modalDate.getDate();
  document.querySelectorAll('.calendar-day').forEach(el => {
    if (parseInt(el.textContent) === day && !el.classList.contains('other-month')) {
      el.classList.add('selected');
    }
  });
}

// ------------------- ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô -------------------
function nextMonth() {
  const wrapper = document.getElementById('calendarContentWrapper');
  wrapper.style.transform = 'translateX(-200%)';
  wrapper.addEventListener('transitionend', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderAllMonths();
    wrapper.style.transition = 'none';
    wrapper.style.transform = 'translateX(-100%)';
    setTimeout(() => wrapper.style.transition = 'transform 0.5s ease', 10);
  }, { once: true });
}

function prevMonth() {
  const wrapper = document.getElementById('calendarContentWrapper');
  wrapper.style.transform = 'translateX(0)';
  wrapper.addEventListener('transitionend', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderAllMonths();
    wrapper.style.transition = 'none';
    wrapper.style.transform = 'translateX(-100%)';
    setTimeout(() => wrapper.style.transition = 'transform 0.5s ease', 10);
  }, { once: true });
}



// ------------------- Modal ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô -------------------
function showMonthModal() {
  const modal = document.getElementById('monthModal');
  const grid = document.getElementById('monthGrid');
  let html = '';
  thaiMonths.forEach((month, index) => {
    html += `<div class="modal-item" onclick="selectMonthFromModal(${index})">${month}</div>`;
  });
  grid.innerHTML = html;
  modal.classList.add('active');


}

function selectMonthFromModal(monthIndex) {
  currentDate.setMonth(monthIndex);
  document.getElementById('monthModal').classList.remove('active');
  renderAllMonths();
}


// ------------------- Modal ‡∏õ‡∏µ -------------------
let yearModalBase = null;

function showYearModal() {
  const modal = document.getElementById('YearModal');
  const currentYear = currentDate.getFullYear() + 543;
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  yearModalBase = Math.floor(currentYear / 10) * 10; // ‡πÄ‡∏ä‡πà‡∏ô 2570 ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 2569
  renderYearModalGrid();
  modal.classList.add('active');

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö swipe
  setupModalSwipe(modal, 'year');

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤ (‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô modal)
  document.addEventListener('keydown', handleYearModalArrowKeys);
}

function handleYearModalArrowKeys(e) {
  const modal = document.getElementById('YearModal');
  if (!modal.classList.contains('active')) return;

  if (e.key === 'ArrowRight') nextDecadeInYearModal();
  else if (e.key === 'ArrowLeft') prevDecadeInYearModal();
}

function closeYearModal() {
  const modal = document.getElementById('YearModal');
  modal.classList.remove('active');
  document.removeEventListener('keydown', handleYearModalArrowKeys);
}

function renderYearModalGrid() {
  const grid = document.getElementById('YearGrid');
  let html = '';

  // ‡πÅ‡∏™‡∏î‡∏á 12 ‡∏õ‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 2569‚Äì2580)
  for (let year = yearModalBase; year < yearModalBase + 11; year++) {
    html += `<div class="modal-item" onclick="selectYearFromModal(${year - 543})">${year}</div>`;
  }

  grid.innerHTML = `
    <div class="year-modal-header">
      <button id="prevDecadeBtn" class="arrow-btn">‚Üê</button>
      <span>${yearModalBase} - ${yearModalBase + 10}</span>
      <button id="nextDecadeBtn" class="arrow-btn">‚Üí</button>
    </div>
    ${html}
  `;

  document.getElementById('prevDecadeBtn').addEventListener('click', prevDecadeInYearModal);
  document.getElementById('nextDecadeBtn').addEventListener('click', nextDecadeInYearModal);
}

function nextDecadeInYearModal() {
  yearModalBase += 10; // ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ 12 ‡∏õ‡∏µ
  renderYearModalGrid();
}

function prevDecadeInYearModal() {
  yearModalBase -= 10; // ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 12 ‡∏õ‡∏µ
  renderYearModalGrid();
}


function selectYearFromModal(year) {
  currentDate.setFullYear(year);
  renderAllMonths();
  closeYearModal();
}


// ------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Modal ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° -------------------
function showActivityModal(dateObj) {
  const modal = document.getElementById('activityModal');
  modalDate = new Date(dateObj);
  document.body.style.overflow = 'hidden';

  renderActivityInModal();
  modal.classList.add('active');

  // Scroll mouse ‡πÉ‡∏ô modal
  modal.addEventListener('wheel', handleModalScroll);
  // Swipe ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
  setupModalSwipe(modal, 'activity');
  // Keyboard arrow
  window.addEventListener('keydown', handleModalArrows);
}

function handleModalArrows(e) {
  const modal = document.getElementById('activityModal');
  if (!modal.classList.contains('active')) return;

  if (e.key === 'ArrowRight') modalNextDay();
  else if (e.key === 'ArrowLeft') modalPrevDay();
}

function modalNextDay() {
  modalDate.setDate(modalDate.getDate() + 1);
  updateModalDate();
}
function modalPrevDay() {
  modalDate.setDate(modalDate.getDate() - 1);
  updateModalDate();
}



function updateModalDate() {
  renderActivityInModal();
  currentDate = new Date(modalDate);
  renderAllMonths();
  const day = modalDate.getDate();
  document.querySelectorAll('.calendar-day').forEach(el => {
    if (parseInt(el.textContent) === day && !el.classList.contains('other-month')) {
      el.classList.add('selected');
    }
  });
}

function closeActivityModal() {
  const modal = document.getElementById('activityModal');
  modal.classList.remove('active');
  modal.removeEventListener('wheel', handleModalScroll);
  window.removeEventListener('keydown', handleModalArrows);
  document.body.style.overflow = '';
}

// ------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Swipe ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ -------------------
function setupModalSwipe(modal, type) {
  let startX = 0;
  let endX = 0;

  modal.addEventListener('touchstart', e => startX = e.changedTouches[0].screenX);
  modal.addEventListener('touchend', e => {
    endX = e.changedTouches[0].screenX;
    const swipe = endX - startX;

    if (Math.abs(swipe) < 50) return; // ‡∏õ‡∏±‡∏î‡πÄ‡∏ö‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    if (type === 'activity') {
      if (swipe < 0) modalNextDay(); // ‡∏õ‡∏±‡∏î‡∏ã‡πâ‡∏≤‡∏¢ = ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      else modalPrevDay(); // ‡∏õ‡∏±‡∏î‡∏Ç‡∏ß‡∏≤ = ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    }‡∏Å
  });
}

// ------------------- Render ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î -------------------
function renderAllMonths() {
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();

  const prev = new Date(year, month - 1, 1);
  const next = new Date(year, month + 1, 1);

  document.getElementById('prevMonth').innerHTML = generateMonthHTML(prev);
  document.getElementById('currentMonthContent').innerHTML = generateMonthHTML(currentDate, true);
  document.getElementById('nextMonth').innerHTML = generateMonthHTML(next);

  document.getElementById('currentMonth').textContent = thaiMonths[month];
  document.getElementById('currentYear').textContent = year + 543;

  setupDayClick();
}


// ------------------- ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô -------------------
function setupDayClick() {
  document.querySelectorAll('.calendar-day').forEach(dayEl => {
    dayEl.addEventListener('click', () => {
      document.querySelectorAll('.calendar-day.selected').forEach(el => el.classList.remove('selected'));
      dayEl.classList.add('selected');

      const day = parseInt(dayEl.textContent);
      const year = currentDate.getFullYear();
      let month = currentDate.getMonth();

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (dayEl.classList.contains('other-month')) {
        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const daysInPrevMonth = new Date(year, month, 0).getDate();

        // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô .other-month < 15 ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢ grid ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        // ‡∏ñ‡πâ‡∏≤ > (daysInPrevMonth - firstDayOfMonth) ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if (day <= 15 && dayEl.parentElement && dayEl.parentElement.parentElement) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡πÉ‡∏ô grid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏ù‡∏±‡πà‡∏á
          const index = Array.from(document.querySelectorAll('.calendar-day')).indexOf(dayEl);
          const totalDays = document.querySelectorAll('.calendar-day').length;
          if (index > totalDays - 7) month += 1; // ‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          else month -= 1; // ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å ‡πÜ ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        } else {
          // fallback ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
          if (day > 20) month -= 1;
          else month += 1;
        }
      }

      const selectedDate = new Date(year, month, day);
      showActivityModal(selectedDate);
    });
  });
}



// ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô modal
function renderActivityInModal() {
  const title = document.getElementById('activityTitle');
  const list = document.getElementById('activityList');

  const year = modalDate.getFullYear();
  const month = modalDate.getMonth();
  const day = modalDate.getDate();

  title.textContent = `‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${day} ${thaiMonths[month]} ${year + 543}`;
  list.innerHTML = '';

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  const exampleEvents = {
    '2025-10-22': ['‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï', '‡∏ô‡∏±‡∏î‡∏û‡∏£‡∏µ‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'],
    '2025-10-25': ['‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏†‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡πå'],
  };

  const key = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
  const events = exampleEvents[key];

  if (events && events.length > 0) {
    events.forEach(e => {
      const div = document.createElement('div');
      div.className = 'activity-item';
      div.textContent = `‚Ä¢ ${e}`;
      list.appendChild(div);
    });
  } else {
    list.innerHTML = '<p style="color:#999;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>';
  }

  // ------------------- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° -------------------
  document.getElementById('addActivityBtn').addEventListener('click', addActivity);
  document.getElementById('activityInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') addActivity();
  });

  function addActivity() {
  const input = document.getElementById('activityInput');
  const text = input.value.trim();
  if (text === '') return; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î

  const div = document.createElement('div');
  div.className = 'activity-item';
  div.textContent = `‚Ä¢ ${text}`;
  document.getElementById('activityList').appendChild(div);

  input.value = '';
  }
}


// ------------------- Event listeners -------------------
function setupEventListeners() {
  document.getElementById('currentMonth').addEventListener('click', showMonthModal);
  document.getElementById('closeMonth').addEventListener('click', () => {
    document.getElementById('monthModal').classList.remove('active');
  });

  document.getElementById('currentYear').addEventListener('click', showYearModal);
  document.getElementById('closeYear').addEventListener('click', () => {
    document.getElementById('YearModal').classList.remove('active');
  });

  document.getElementById('closeActivity').addEventListener('click', closeActivityModal);

  // ‡∏Ñ‡∏•‡∏¥‡∏Å background ‡∏õ‡∏¥‡∏î modal
  window.onclick = (e) => {
    if (e.target.classList.contains('modal')) {
      closeActivityModal();
      e.target.classList.remove('active');
    }
  };

  // Scroll ‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÉ‡∏ô body (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô modal ‡∏õ‡∏¥‡∏î)
  window.addEventListener('wheel', (e) => {
    const modalActive = document.querySelector('.modal.active');
    if (modalActive) return;
    if (settingPanel && settingPanel.classList.contains('active')) return;
    if (e.deltaY > 0) nextMonth();
    else if (e.deltaY < 0) prevMonth();
  });

  // Arrow keys
  window.addEventListener('keydown', (e) => {
    const modalActive = document.querySelector('.modal.active');
    if (modalActive) return;
    if (settingPanel && settingPanel.classList.contains('active')) return;
    if (e.key === 'ArrowRight') nextMonth();
    else if (e.key === 'ArrowLeft') prevMonth();
  });

  // Touch swipe
  const calendarContainer = document.getElementById('calendarContent');
  let touchStartX = 0;
  let touchEndX = 0;

  calendarContainer.addEventListener('touchstart', e => { touchStartX = e.changedTouches[0].screenX; });
  calendarContainer.addEventListener('touchend', e => {
    const modalActive = document.querySelector('.modal.active');
    if (modalActive) return;
    if (settingPanel && settingPanel.classList.contains('active')) return;
    touchEndX = e.changedTouches[0].screenX;
    const swipe = touchEndX - touchStartX;
    if (swipe > 80) prevMonth();
    else if (swipe < -80) nextMonth();
  });
}


// ------------------- MODAL ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î -------------------
const addDetailModal = document.getElementById('addDetailActivityModal');
const closeAddDetailModal = document.getElementById('closeAddDetailModal');
const cancelEventBtn = document.getElementById('cancelEventBtn');
const repeatToggle = document.getElementById('repeatToggle');
const repeatOptions = document.getElementById('repeatOptions');

function openAddDetailModal(dateObj = null) {
  addDetailModal.classList.add('active');
  document.body.style.overflow = 'hidden';
  if (dateObj) {
    const isoDate = dateObj.toISOString().split('T')[0];
    document.getElementById('startDate').value = isoDate;
    document.getElementById('endDate').value = isoDate;
  }
}

function closeAddDetailActivityModal() {
  addDetailModal.classList.remove('active');
  document.body.style.overflow = '';
}

// toggle ‡∏ã‡πâ‡∏≥
repeatToggle.addEventListener('change', () => {
  repeatOptions.style.display = repeatToggle.checked ? 'block' : 'none';
});

// ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
closeAddDetailModal.addEventListener('click', closeAddDetailActivityModal);
cancelEventBtn.addEventListener('click', closeAddDetailActivityModal);

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î + ‡∏ï‡∏≠‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
document.getElementById('addActivityBtn').addEventListener('click', () => {
  const input = document.getElementById('activityInput');
  if (input.value.trim() === '') {
    openAddDetailModal(modalDate);
  }
});

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
function handleEmptyDayClick(dateObj) {
  openAddDetailModal(dateObj);
}


// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á DOM ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö
document.addEventListener("DOMContentLoaded", () => {
  init();

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å onclick ‡πÉ‡∏ô HTML
  window.selectMonthFromModal = selectMonthFromModal;
  window.selectYearFromModal = selectYearFromModal;

});
